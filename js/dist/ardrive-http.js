"use strict";let retryStatusCodes=[408,429,440,460,499,500,502,503,504,520,521,522,523,524,525,527,598,599];const isStatusCodeError=e=>e>=400&&e<=599,retryDelay=(e,t)=>t*Math.pow(1.5,e),logMessage=(e,t,s,r)=>`uri: ${e}
  response: Http status error [${t}]: ${s}
  retryAttempts: ${r}`,logger={retry:(e,t,s,r)=>{const n=logMessage(e,t,s,r);console.warn(`Network Request Retry
${n}`)},error:(e,t,s,r)=>{const n=logMessage(e,t,s,r);console.error(`Network Request Error
${n}`)}},requestType={json:{contentType:"application/json; charset=utf-8",getResponse:async e=>await e.json()},bytes:{contentType:"application/octet-stream",getResponse:async e=>await e.arrayBuffer()},text:{contentType:"plain/text; charset=utf-8",getResponse:async e=>await e.text()}},get=async([e,t,s,r,n=!1,i=0,g,o,c])=>{try{const a=g?{Range:`bytes=${o}-${c}`}:void 0,p=await fetch(e,{method:"GET",redirect:"follow",signal:AbortSignal.timeout(8e3),headers:a}),u=p.status,y=p.statusText;if(s>0&&retryStatusCodes.includes(u))return n||logger.retry(e,u,y,i),await get([e,t,s-1,r,n,i+1,g,o,c]);if(isStatusCodeError(u))return{error:`Network Request Error
${logMessage(e,u,y,i)}`,retryAttempts:i};const l=await requestType[`${t}`].getResponse(p);return{statusCode:u,statusMessage:y,data:l,retryAttempts:i}}catch(a){return{error:`${a}`,retryAttempts:i}}},post=async([e,t,s,r,n,i,g=!1,o=0])=>{try{const c=await fetch(e,{method:"POST",headers:{...s!==requestType.text.contentType?{"Content-Type":s}:{}},redirect:"follow",body:t,signal:AbortSignal.timeout(8e3)}),a=c.status,p=c.statusText;if(n>0&&retryStatusCodes.includes(a))return g||logger.retry(e,a,p,o),await post([e,t,s,r,n-1,i,g,o+1]);if(isStatusCodeError(a))return{error:`Network Request Error
${logMessage(e,a,p,o)}`,retryAttempts:o};const u=await requestType[`${r}`].getResponse(c);return{statusCode:a,statusMessage:p,data:u,retryAttempts:o}}catch(c){return{error:`${c}`,retryAttempts:o}}};self.get=get,self.post=post;
