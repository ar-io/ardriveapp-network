"use strict";let retryStatusCodes=[408,429,440,460,499,500,502,503,504,520,521,522,523,524,525,527,598,599];const isStatusCodeError=e=>e>=400&&e<=599,retryDelay=(e,t)=>t*Math.pow(1.5,e),logMessage=(e,t,s,n)=>`uri: ${e}
  response: Http status error [${t}]: ${s}
  retryAttempts: ${n}`,logger={retry:(e,t,s,n)=>{const o=logMessage(e,t,s,n);console.warn(`Network Request Retry
${o}`)},error:(e,t,s,n)=>{const o=logMessage(e,t,s,n);console.error(`Network Request Error
${o}`)}},requestType={json:{contentType:"application/json; charset=utf-8",getResponse:async e=>await e.json()},bytes:{contentType:"application/octet-stream",getResponse:async e=>await e.arrayBuffer()},text:{contentType:"plain/text; charset=utf-8",getResponse:async e=>await e.text()}},get=async([e,t,s,n,o=!1,i=0])=>{try{const c=await fetch(e,{method:"GET",redirect:"follow"}),r=c.status,a=c.statusText;if(s>0&&retryStatusCodes.includes(r))return o||logger.retry(e,r,a,i),await get([e,t,s-1,n,o,i+1]);if(isStatusCodeError(r))return{error:`Network Request Error
${logMessage(e,r,a,i)}`,retryAttempts:i};const u=await requestType[`${t}`].getResponse(c);return{statusCode:r,statusMessage:a,data:u,retryAttempts:i}}catch(c){return{error:`${c}`,retryAttempts:i}}},post=async([e,t,s,n,o,i,c=!1,r=0])=>{try{const a=await fetch(e,{method:"POST",headers:{...s!==requestType.text.contentType?{"Content-Type":s}:{}},redirect:"follow",body:t}),u=a.status,p=a.statusText;if(o>0&&retryStatusCodes.includes(u))return c||logger.retry(e,u,p,r),await post([e,t,s,n,o-1,i,c,r+1]);if(isStatusCodeError(u))return{error:`Network Request Error
${logMessage(e,u,p,r)}`,retryAttempts:r};const y=await requestType[`${n}`].getResponse(a);return{statusCode:u,statusMessage:p,data:y,retryAttempts:r}}catch(a){return{error:`${a}`,retryAttempts:r}}};self.get=get,self.post=post;
