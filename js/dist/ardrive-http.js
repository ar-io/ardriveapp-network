"use strict";let retryStatusCodes=[408,429,440,460,499,500,502,503,504,520,521,522,523,524,525,527,598,599];const isStatusCodeError=e=>e>=400&&e<=599,retryDelay=(e,t)=>t*Math.pow(1.5,e),logMessage=(e,t,s,n)=>`uri: ${e}
  response: Http status error [${t}]: ${s}
  retryAttempts: ${n}`,logger={retry:(e,t,s,n)=>{const a=logMessage(e,t,s,n);console.warn(`Network Request Retry
${a}`)},error:(e,t,s,n)=>{const a=logMessage(e,t,s,n);console.error(`Network Request Error
${a}`)}},requestType={json:{contentType:"application/json; charset=utf-8",getResponse:async e=>await e.json()},bytes:{contentType:"application/octet-stream",getResponse:async e=>await e.arrayBuffer()},text:{contentType:"plain/text; charset=utf-8",getResponse:async e=>await e.text()}},get=async([e,t,s,n,a=!1,c=0,u])=>{try{const o=u?new Headers({Range:`bytes=${u.start}-${u.end}`}):void 0,i=await fetch(e,{method:"GET",redirect:"follow",signal:AbortSignal.timeout(8e3),headers:o}),r=i.status,p=i.statusText;if(s>0&&retryStatusCodes.includes(r))return a||logger.retry(e,r,p,c),await get([e,t,s-1,n,a,c+1]);if(isStatusCodeError(r))return{error:`Network Request Error
${logMessage(e,r,p,c)}`,retryAttempts:c};const g=await requestType[`${t}`].getResponse(i);return{statusCode:r,statusMessage:p,data:g,retryAttempts:c}}catch(o){return{error:`${o}`,retryAttempts:c}}},post=async([e,t,s,n,a,c,u=!1,o=0])=>{try{const i=await fetch(e,{method:"POST",headers:{...s!==requestType.text.contentType?{"Content-Type":s}:{}},redirect:"follow",body:t,signal:AbortSignal.timeout(8e3)}),r=i.status,p=i.statusText;if(a>0&&retryStatusCodes.includes(r))return u||logger.retry(e,r,p,o),await post([e,t,s,n,a-1,c,u,o+1]);if(isStatusCodeError(r))return{error:`Network Request Error
${logMessage(e,r,p,o)}`,retryAttempts:o};const g=await requestType[`${n}`].getResponse(i);return{statusCode:r,statusMessage:p,data:g,retryAttempts:o}}catch(i){return{error:`${i}`,retryAttempts:o}}};self.get=get,self.post=post;
